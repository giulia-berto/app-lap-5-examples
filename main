#!/bin/bash
#PBS -k o
#PBS -l nodes=1:ppn=4,walltime=5:00:00

## modules
echo "Loading modules"
module unload matlab
module load matlab/2017a
module load spm/8
module unload python
module load dipy/dev
echo "Finished loading modules"

export PYTHONPATH=/N/u/brlife/git/nibabel:$PYTHONPATH

echo "copying moving and static tractograms"
subjID=`jq -r '._inputs[0].meta.subject' config.json`
static=`jq -r '.tractogram_static' config.json`
t1_static=`jq -r '.t1_static' config.json`
segmentations=`jq -r '.segmentations' config.json`
movings=`jq -r '.tractograms_moving' config.json`
t1s=`jq -r '.t1s_moving' config.json`

# Building arrays
arr_seg=()
arr_seg+=(${segmentations})
arr_mov=()
arr_mov+=(${movings})
arr_t1s=()
arr_t1s+=(${t1s})

echo "Check the inputs subject id"
num_ex=$((${#arr_seg[@]} - 2))
if [ ! $subjID == `jq -r '._inputs[1].meta.subject' config.json` ]; then
echo "Inputs subject id incorrectly inserted. Check them again."
	exit 1
fi
for i in `seq 1 $num_ex`; 
do 
	id_seg=$(jq -r "._inputs[1+$i].meta.subject" config.json | tr -d "_")
	id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")
	id_t1=$(jq -r "._inputs[1+$i+$num_ex+$num_ex].meta.subject" config.json | tr -d "_")	
	if [ $id_seg == $id_mov -a $id_seg == $id_t1 ]; then
	echo "Inputs subject id correctly inserted"
else
	echo "Inputs subject id incorrectly inserted. Check them again."
	exit 1
fi
done


echo "Building LAP environment"
if [ -f "linear_assignment.c" ];then
	echo "LAP already built. Skipping"
else
	cython linear_assignment.pyx;
	python setup_lapjv.py build_ext --inplace;

	ret=$?
	if [ ! $ret -eq 0 ]; then
		echo "LAP environment build failed"
		echo $ret > finished
		exit $ret
	fi
fi

echo "Tractogram conversion to trk"
mkdir tractograms_directory;
if [ -f "${arr_mov[1]//,}" == "*.tck" ];then
	echo "Input in tck format. Convert it to trk."
	python tck2trk.py $t1_static $static;
	#singularity exec docker://brainlife/dipy:0.14 python ./tck2trk.py $t1_static $static
	mv *.trk $subjID'_track.trk';
	for i in `seq 1 $num_ex`; 
	do 
		t1_moving=${arr_t1s[i]//,}
		id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")
		python tck2trk.py $t1_moving ${arr_mov[i]//,};
		mv *.trk tractogram_directory/$id_mov'_track.trk';
    		#singularity exec docker://brainlife/dipy:0.14 python ./tck2trk.py $t1_moving ${arr_mov[i]//,} 
	done
else
	echo "Input in fe format. Convert it to trk."
	matlab -nosplash -nodisplay -r "lifeConverterMulti('$static', '$t1_static')";
	mv output.trk $subjID'_track.trk';
	for i in `seq 1 $num_ex`; 
	do
		id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")		
		matlab -nosplash -nodisplay -r "lifeConverterMulti(${arr_mov[i]//,}, ${arr_t1s[i]//,})";
    		#singularity exec docker://brainlife/mcr:neurodebian1604-r2017a ./compiled/lifeConverterMulti ${arr_mov[i]//,} ${arr_t1s[i]//,}
		mv output.trk tractograms_directory/$id_mov'_track.trk';
	done 
fi

if [ -z "tractograms_directory" ]; then    
	echo "tractograms_directory is empty."; 
	exit 1;
else    
	echo "tractograms_directory created."; 
fi


echo "AFQ conversion to trk"
mkdir examples_directory;

for i in `seq 1 $num_ex`; 
do
	id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")		
	matlab -nosplash -nodisplay -r "afqConverterMulti(${arr_seg[i]//,}, ${arr_t1s[i]//,})";
    	#singularity exec docker://brainlife/mcr:neurodebian1604-r2017a ./compiled/afqConverterMulti ${arr_seg[i]//,} ${arr_t1s[i]//,}
	while read tract_name; do
		echo "Tract name: $tract_name";
		mv $tract_name'_tract.trk' examples_directory/$id_mov'_'$tract_name'_tract.trk';
	done < tract_name_list.txt
done

if [ -z "examples_directory" ]; then    
	echo "examples_directory is empty."; 
	exit 1;
else    
	echo "examples_directory created."; 
fi


echo "Running LAP multi example"
while read tract_name; do
	echo "Tract name: $tract_name"; 
	base_name=$tract_name'_tract'
	run=`jq -r '.run' config.json`
	output_filename=${subjID}'_'$base_name'_'$run'.tck'
	array_filename='result_lap'
	python lap_multiple_examples.py -moving_dir tractograms_directory -static $subjID'_track.trk' -ex_dir examples_directory -out $output_filename;
	#singularity exec docker://brainlife/dipy:0.14 python ./lap_multiple_examples.py -moving_dir tractograms_directory -static ${subjID}_track.trk -ex_dir examples_directory -out $output_filename
	mv result_lap.npy ${subjID}'_'${base_name/tract/$array_filename}'_'$run'.npy'

	ret=$?
	if [ ! $ret -eq 0 ]; then
		echo "LAP single example failed"
		echo $ret > finished
		exit $ret
	fi
done < tract_name_list.txt


echo "Complete"
