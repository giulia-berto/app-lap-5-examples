#!/bin/bash
#PBS -k o
#PBS -l nodes=1:ppn=8,walltime=10:00:00

## modules
echo "Loading modules"
module load ants
module unload matlab
module load matlab/2017a
module load spm/8
module unload python
module load dipy/dev
module load nodejs
module unload mrtrix/0.2.12 
module load mrtrix/0.3.15
module unload fsl
module load fsl/5.0.9
echo "Finished loading modules"

export PYTHONPATH=/N/u/brlife/git/nibabel:$PYTHONPATH

echo "copying moving and static tractograms"
subjID=`jq -r '._inputs[0].meta.subject' config.json`
static=`jq -r '.tractogram_static' config.json`
t1_static=`jq -r '.t1_static' config.json`
segmentations=`jq -r '.segmentations' config.json`
movings=`jq -r '.tractograms_moving' config.json`
t1s=`jq -r '.t1s_moving' config.json`
SLR_LAP=`jq -r '.SLR_LAP' config.json`
ANTs_LAP=`jq -r '.ANTs_LAP' config.json`
ANTs_LAPen=`jq -r '.ANTs_LAPen' config.json`
ANTs_LAPterm=`jq -r '.ANTs_LAPterm' config.json`
ANTs_LAPanat=`jq -r '.ANTs_LAPanat' config.json`
true_segmentation=`jq -r '.true_segmentation' config.json`

# Building arrays
arr_seg=()
arr_seg+=(${segmentations})
arr_mov=()
arr_mov+=(${movings})
arr_t1s=()
arr_t1s+=(${t1s})

echo "Check the inputs subject id"
num_ex=$((${#arr_seg[@]} - 2))
if [ ! $subjID == `jq -r '._inputs[1].meta.subject' config.json` ]; then
echo "Inputs subject id incorrectly inserted. Check them again."
	exit 1
fi
for i in `seq 1 $num_ex`; 
do 
	id_seg=$(jq -r "._inputs[1+$i].meta.subject" config.json | tr -d "_")
	id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")
	id_t1=$(jq -r "._inputs[1+$i+$num_ex+$num_ex].meta.subject" config.json | tr -d "_")	
	if [ $id_seg == $id_mov -a $id_seg == $id_t1 ]; then
	echo "Inputs subject id correctly inserted"
else
	echo "Inputs subject id incorrectly inserted. Check them again."
	exit 1
fi
done


echo "Building LAP environment"
if [ -f "linear_assignment.c" ];then
	echo "LAP already built. Skipping"
else
	cython linear_assignment.pyx;
	python setup_lapjv.py build_ext --inplace;

	ret=$?
	if [ ! $ret -eq 0 ]; then
		echo "LAP environment build failed"
		echo $ret > finished
		exit $ret
	fi
fi

echo "Tractogram conversion to trk and, if requested,  ANTs transformation"
mkdir tractograms_directory;
if [[ $static == *.tck ]];then
	echo "Input in tck format. Convert it to trk."
	cp $static ./tractogram_static.tck;
	python tck2trk.py $t1_static tractogram_static.tck;
	#singularity exec docker://brainlife/dipy:0.14 python ./tck2trk.py $t1_static $static
	cp tractogram_static.trk $subjID'_track.trk';
	for i in `seq 1 $num_ex`; 
	do 
		t1_moving=${arr_t1s[i]//[,\"]}
		id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")
		cp ${arr_mov[i]//[,\"]} ./${id_mov}_tractogram_moving.tck;
		python tck2trk.py $t1_moving ${id_mov}_tractogram_moving.tck;
		cp ${id_mov}_tractogram_moving.trk tractograms_directory/$id_mov'_track.trk';
    		#singularity exec docker://brainlife/dipy:0.14 python ./tck2trk.py $t1_moving tractogram_moving 
		if [ ${ANTs_LAP} == true -o ${ANTs_LAPen} == true ]; then
			echo "ANTs transformation with T1";
			./ants_t1w_transformation.sh ${id_mov} ${t1_moving} ${subjID} ${t1_static} &
		fi
	done
	echo "Waiting for ANTs tranformation to finish"
	wait
	echo "ANTs transformation done."
fi

if [ -z "$(ls -A -- "tractograms_directory")" ]; then    
	echo "tractograms_directory is empty."; 
	exit 1;
else    
	echo "tractograms_directory created."; 
fi


echo "AFQ conversion to trk"
#mkdir examples_directory;

for i in `seq 1 $num_ex`; 
do
	t1_moving=${arr_t1s[i]//[,\"]}
	id_mov=$(jq -r "._inputs[1+$i+$num_ex].meta.subject" config.json | tr -d "_")		
	matlab -nosplash -nodisplay -r "afqConverterMulti(${arr_seg[i]//,}, ${arr_t1s[i]//,})";
    	#singularity exec docker://brainlife/mcr:neurodebian1604-r2017a ./compiled/afqConverterMulti ${arr_seg[i]//,} ${arr_t1s[i]//,}
	while read tract_name; do
		echo "Tract name: $tract_name";
		if [ ! -d "examples_directory_$tract_name" ]; then
  			mkdir examples_directory_$tract_name;
		fi
		mv $tract_name'_tract.trk' examples_directory_$tract_name/$id_mov'_'$tract_name'_tract.trk';

		if [ -z "$(ls -A -- "examples_directory_$tract_name")" ]; then    
		echo "examples_directory is empty."; 
			exit 1;
		else    
			echo "examples_directory created."; 
		fi	
	done < tract_name_list.txt
	
	if [ ${ANTs_LAP} == true -o ${ANTs_LAPen} == true ]; then
		echo "ANTs registration with T1";
		./ants_t1w_registration.sh ${id_mov} ${t1_moving} ${subjID} ${t1_static} &
	fi

	#echo "Coregistering ROIs on the moving subject space"
	#./mni_roi_registration.sh ${id_mov} ${t1_moving} AFQ &

done
echo "Waiting for ANTs registration and ROIs coregistration to finish"
wait
echo "ANTs registration and ROIs coregistration done."

echo "Coregistering ROIs on the target subject space"
./mni_roi_registration.sh ${subjID} ${t1_static} AFQ


echo "Running LAP"
mkdir tracts_tck;
mkdir results_lap;


if [ ${SLR_LAP} == true ]; then

	run=SLR_LAP
	echo "Running LAP multi example SLR_LAP"
	
	while read tract_name; do
		echo "Tract name: $tract_name"; 
		base_name=$tract_name'_tract'
		output_filename=tracts_tck/${subjID}_${base_name}_${run}.tck
		array_filename='result_lap'
		python lap_multiple_examples_0625_slr.py -moving_dir tractograms_directory -static $subjID'_track.trk' -ex_dir examples_directory_$tract_name -out $output_filename;

		mv result_lap.npy ./results_lap/${subjID}'_'${base_name/tract/$array_filename}'_'$run'.npy'
		
		ret=$?
		if [ ! $ret -eq 0 ]; then
			echo "LAP single example failed"
			echo $ret > finished
			exit $ret
		fi

	done < tract_name_list.txt
fi


if [ ${ANTs_LAP} == true ]; then

	run=ANTs_LAP
	echo "Running LAP multi example ANTs_LAP"
	
	while read tract_name; do
		echo "Tract name: $tract_name"; 
		base_name=$tract_name'_tract'
		output_filename=tracts_tck/${subjID}_${base_name}_${run}.tck
		array_filename='result_lap'
		python lap_multiple_examples_0625_ants.py -moving_dir tractograms_directory -static $subjID'_track.trk' -ex_dir aligned_examples_directory_$tract_name -out $output_filename;

		mv result_lap.npy ./results_lap/${subjID}'_'${base_name/tract/$array_filename}'_'$run'.npy'
		
		ret=$?
		if [ ! $ret -eq 0 ]; then
			echo "LAP single example failed"
			echo $ret > finished
			exit $ret
		fi

	done < tract_name_list.txt

fi


if [ ${ANTs_LAPen} == true ]; then

	run=ANTs_LAPen
	g=1
	alpha=1
	echo "Running LAP multi example ANTs_LAPen"
	
	while read tract_name; do
		echo "Tract name: $tract_name"; 
		base_name=$tract_name'_tract'
		output_filename=tracts_tck/${subjID}_${base_name}_${run}.tck
		array_filename='result_lap'
		python lap_multiple_examples_0625_enhanced.py -moving_dir tractograms_directory -static $subjID'_track.trk' -ex_dir aligned_examples_directory_$tract_name -g $g -alpha $alpha -out $output_filename;

		mv result_lap.npy ./results_lap/${subjID}'_'${base_name/tract/$array_filename}'_'$run'.npy'
		
		ret=$?
		if [ ! $ret -eq 0 ]; then
			echo "LAP single example failed"
			echo $ret > finished
			exit $ret
		fi

	done < tract_name_list.txt

fi


if [ ${ANTs_LAPterm} == true ]; then

	run=ANTs_LAPterm
	g=1
	alpha=0
	echo "Running LAP multi example ANTs_LAPterm"
	
	while read tract_name; do
		echo "Tract name: $tract_name"; 
		base_name=$tract_name'_tract'
		output_filename=tracts_tck/${subjID}_${base_name}_${run}.tck
		array_filename='result_lap'
		python lap_multiple_examples_0625_enhanced.py -moving_dir tractograms_directory -static $subjID'_track.trk' -ex_dir aligned_examples_directory_$tract_name -g $g -alpha $alpha -out $output_filename;

		mv result_lap.npy ./results_lap/${subjID}'_'${base_name/tract/$array_filename}'_'$run'.npy'
		
		ret=$?
		if [ ! $ret -eq 0 ]; then
			echo "LAP single example failed"
			echo $ret > finished
			exit $ret
		fi

	done < tract_name_list.txt

fi


if [ ${ANTs_LAPanat} == true ]; then

	run=ANTs_LAPanat
	g=0
	alpha=1
	echo "Running LAP multi example ANTs_LAPanat"
	
	while read tract_name; do
		echo "Tract name: $tract_name"; 
		base_name=$tract_name'_tract'
		output_filename=tracts_tck/${subjID}_${base_name}_${run}.tck
		array_filename='result_lap'
		python lap_multiple_examples_0625_enhanced.py -moving_dir tractograms_directory -static $subjID'_track.trk' -ex_dir aligned_examples_directory_$tract_name -g $g -alpha $alpha -out $output_filename;

		mv result_lap.npy ./results_lap/${subjID}'_'${base_name/tract/$array_filename}'_'$run'.npy'
		
		ret=$?
		if [ ! $ret -eq 0 ]; then
			echo "LAP single example failed"
			echo $ret > finished
			exit $ret
		fi

	done < tract_name_list.txt

fi


# AFQ conversion and DSC computation
echo "AFQ conversion of graound truth to trk"
matlab -nosplash -nodisplay -r "afqConverter1()";

echo "Computing voxel measures"
python compute_dsc5.py -sub $subjID -list 'tract_name_list.txt';

ret=$?
if [ ! $ret -eq 0 ]; then
	echo "DSC computation failed"
	echo $ret > finished
	exit $ret
fi


#removing files
rm *.trk -f
rm *.tck -f
rm *.nii.gz -f
rm -r tractograms_directory -f
rm -r examples_directory* -f
rm -r aligned_examples_directory* -f
rm kdt -f
rm prototypes.npy -f
rm -r aligned_ROIs -f
rm -r templates -f

echo "Complete"
